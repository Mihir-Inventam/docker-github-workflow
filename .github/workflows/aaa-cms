name: aaa-cms CICD Pipeline

on:
  push:
    branches: 
      - develop

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the repo
        uses: actions/setup-node@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.16

      - name: Install npm dependencies
        run: npm install

      - name: Extract branch name
        shell: bash
        run: |
          echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_ENV
        id: extract_branch

      - name: generate env
        run: |
          touch .env
          BRANCH=${{ steps.extract_branch.outputs.branch }}
          echo "BRANCH=${{ steps.extract_branch.outputs.branch }}" >> $GITHUB_ENV
          echo $BRANCH
          if [ "$BRANCH" = "develop" ]
          then
            echo NODE_ENV=${{ secrets.NODE_ENV_DEV }} >> .env
            echo PORT=${{ secrets.PORT_DEV }} >> .env
            echo SERVER_URL=${{ secrets.SERVER_URL_DEV }} >> .env
            echo ADMIN_APP_URL=${{ secrets.ADMIN_APP_URL_DEV }} >> .env
            echo HOST_APP_URL=${{ secrets.HOST_APP_URL_DEV }} >> .env
            echo DATABASE_CONNECTION_TYPE=${{ secrets.DATABASE_CONNECTION_TYPE_DEV }} >> .env
            echo DATABASE_CONNECTION_URI=${{ secrets.DATABASE_CONNECTION_URI_DEV }} >> .env
            echo DATABASE_CONNECTION_PORT=${{ secrets.DATABASE_CONNECTION_PORT_DEV }} >> .env
            echo DATABASE_CONNECTION_USERNAME=${{ secrets.DATABASE_CONNECTION_USERNAME_DEV }} >> .env
            echo DATABASE_CONNECTION_PASSWORD=${{ secrets.DATABASE_CONNECTION_PASSWORD_DEV }} >> .env
            echo DATABASE_CONNECTION_DATABASE=${{ secrets.DATABASE_CONNECTION_DATABASE_DEV }} >> .env
            echo SECRET_KEY=${{ secrets.SECRET_KEY_DEV }} >> .env
            echo TIMEZONE=${{ secrets.TIMEZONE_DEV }} >> .env
            echo JWT_SECRET=${{ secrets.JWT_SECRET_DEV }} >> .env
            echo EXPIRED_IN=${{ secrets.EXPIRED_IN_DEV }} >> .env
            echo JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET_DEV }} >> .env
            echo REFRESH_EXPIRED_IN=${{ secrets.REFRESH_EXPIRED_IN_DEV }} >> .env
            echo JWT_SECRET_FORGOT_PASSWORD=${{ secrets.JWT_SECRET_FORGOT_PASSWORD_DEV }} >> .env
            echo FORGOT_EXPIRED_IN=${{ secrets.FORGOT_EXPIRED_IN_DEV }} >> .env
            echo JWT_SECRET_EMAIL_VERIFIED=${{ secrets.JWT_SECRET_EMAIL_VERIFIED_DEV }} >> .env
            echo EMAIL_VERIFIED_EXPIRED_IN=${{ secrets.EMAIL_VERIFIED_EXPIRED_IN_DEV }} >> .env
            echo SESSION_SECRET_KEY=${{ secrets.SESSION_SECRET_KEY_DEV }} >> .env
            echo PASSPORT_SECRET_KEY=${{ secrets.PASSPORT_SECRET_KEY_DEV }} >> .env
            echo GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID_DEV }} >> .env
            echo GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET_DEV }} >> .env
            echo FACEBOOK_APP_ID=${{ secrets.FACEBOOK_APP_ID_DEV }} >> .env
            echo FACEBOOK_APP_SECRET=${{ secrets.FACEBOOK_APP_SECRET_DEV }} >> .env
            echo APPLE_CLIENT_ID=${{ secrets.APPLE_CLIENT_ID_DEV }} >> .env
            echo APPLE_TEAM_ID=${{ secrets.APPLE_TEAM_ID_DEV }} >> .env
            echo APPLE_KEY_ID=${{ secrets.APPLE_KEY_ID_DEV }} >> .env
            echo S3_ACCESS_KEY_AWS=${{ secrets.S3_ACCESS_KEY_AWS_DEV }} >> .env

          elif [ "$BRANCH" = "stage" ]
          then
            echo "DEPLOY=false" >> $GITHUB_ENV
            echo ">>>>In stage-phase ENV GENERATION"
            echo NODE_ENV=${{ secrets.NODE_ENV_STAGE }} >> .env
            echo PORT=${{ secrets.PORT }} >> .env
            echo DATABASE_CONNECTION_URI_STAGE=${{ secrets.DATABASE_CONNECTION_URI_STAGE }} >> .env
            echo MATCH_ODDS_DATABASE_CONNECTION_URL=${{ secrets.MATCH_ODDS_DATABASE_CONNECTION_URL }} >> .env
            echo EXPIRED_IN=${{ secrets.EXPIRED_IN_STAGE }} >> .env
            echo REFRESH_EXPIRED_IN=${{ secrets.REFRESH_EXPIRED_IN_STAGE }} >> .env
            echo SECRET_KEY=${{ secrets.SECRET_KEY_STAGE }} >> .env
            echo REDIS_URL=${{ secrets.REDIS_URL_STAGE }} >> .env
            echo REDIS_PORT=${{ secrets.REDIS_PORT_STAGE }} >> .env
            echo IS_JOB=${{ secrets.IS_JOB }} >> .env
            echo BUCKET_NAME=${{ secrets.BUCKET_NAME_STAGE }} >> .env
            echo S3_ACCESS_ID=${{ secrets.S3_ACCESS_ID_STAGE }} >> .env
            echo S3_SECRET_KEY=${{ secrets.S3_SECRET_KEY_STAGE }} >> .env
            echo AWS_REGION=${{ secrets.AWS_REGION_STAGE }} >> .env

          elif [ "$BRANCH" = "prod" ]
          then
            echo "DEPLOY=false" >> $GITHUB_ENV
            echo "<<<<<<In pro-phase ENV GENERATION"
            # echo NODE_ENV=${{ secrets.NODE_ENV_PROD }} >> .env
            echo PORT=${{ secrets.PORT }} >> .env
            echo DATABASE_CONNECTION_URL_PROD=${{ secrets.DATABASE_CONNECTION_URL_PROD }} >> .env
            #echo EXPIRED_IN=${{ secrets.EXPIRED_IN_PROD }} >> .env
            #echo REFRESH_EXPIRED_IN=${{ secrets.REFRESH_EXPIRED_IN_PROD }} >> .env
            #echo SECRET_KEY=${{ secrets.SECRET_KEY_PROD }} >> .env
            #echo REDIS_URL=${{ secrets.REDIS_URL_PROD }} >> .env
            #echo REDIS_PORT=${{ secrets.REDIS_PORT_PROD }} >> .env
            echo LUCKY_SEVEN_GAME_API_LINK=${{ secrets.LUCKY_SEVEN_GAME_API_LINK }} >> .env
            echo BET_AND_SETTLE_SERVICE_API_LINK=${{ secrets.BET_AND_SETTLE_SERVICE_API_LINK }} >> .env
            echo RSA_PUBLIC_KEY=${{ secrets.RSA_PUBLIC_KEY }} >> .env
            echo RSA_PRIVATE_KEY=${{ secrets.RSA_PRIVATE_KEY }} >> .env
            
          else
            echo "DEPLOY=false" >> $GITHUB_ENV
          fi
          ls -la
          cat .env

      - name: npm build
        run: |
          npm run build

      - if: ${{ env.BRANCH == 'develop' }}
        name: branch detection
        run: echo "$BRANCH"

      - if: ${{ env.BRANCH == 'stage' }}
        name: branch detection
        run: echo "$BRANCH"

      - if: ${{ env.BRANCH == 'prod' }}
        name: branch detection
        run: echo "$BRANCH"

      - if: ${{ env.BRANCH == 'develop' }}
        name: Deploy to Server-DEV, Skipped if branch to the code is not develop
        uses: easingthemes/ssh-deploy@main
        env:
          REMOTE_SSH_KEY: ${{ secrets.REMOTE_SSH_KEY }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          SOURCE: './'
          TARGET: /home/ubuntu/aaa-cms-dev/

      - if: ${{ env.BRANCH == 'stage' }}
        name: Deploy to Server-Stage, Skipped if branch to the code is not stage
        uses: easingthemes/ssh-deploy@main
        env:
          REMOTE_SSH_KEY: ${{ secrets.REMOTE_SSH_KEY }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          SOURCE: './'
          TARGET: /home/ubuntu/aaa-cms-stage/

      - if: ${{ env.BRANCH == 'prod' }}
        name: Deploy to Server-PROD, Skipped if branch to the code is not prod
        uses: easingthemes/ssh-deploy@main
        env:
          REMOTE_SSH_KEY: ${{ secrets.REMOTE_SSH_KEY }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          SOURCE: './'
          TARGET: /home/ubuntu/aaa-cms-prod/

      - if: ${{ env.BRANCH == 'develop' }}
        name: executing remote ssh commands-DEV, Skipped if branch to the code is not develop
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.REMOTE_SSH_KEY }}
          port: 22
          script: |
            cd ~/aaa-cms-dev
            npm i
            pm2 stop aaa-cms-dev || true
            pm2 reload aaa-cms-dev || pm2 start -n aaa-cms-dev npm -- start

      - if: ${{ env.BRANCH == 'stage' }}
        name: executing remote ssh commands-Stage, Skipped if branch to the code is not stage
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.REMOTE_SSH_KEY }}
          port: 22
          script: |
            cd ~/aaa-cms-stage
            npm i
            pm2 stop aaa-cms-stage || true
            pm2 reload aaa-cms-stage || pm2 start -n aaa-cms-stage npm -- start

      - if: ${{ env.BRANCH == 'prod' }}
        name: executing remote ssh commands-PROD, Skipped if branch to the code is not prod
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.REMOTE_SSH_KEY }}
          port: 22
          script: |
            cd ~/aaa-cms-prod
            npm i
            pm2 stop aaa-cms-prod || true
            pm2 reload aaa-cms-prod || pm2 start -n aaa-cms-prod npm -- start
