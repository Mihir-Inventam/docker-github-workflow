name: Deploy to EC2 using Docker

on:
  push:
    branches:
      - temp_branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: List files in the working directory
      run: |
        echo "Listing files in the current directory:"
        ls -alh

    - name: Docker Login
      uses: docker/login-action@v3.3.0
      with:
        username: ${{ secrets.DOCKER_USER_TEMP }}
        password: ${{ secrets.DOCKER_PASSWORD_TEMP }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5.5.1
      with:
        images: mihirinventam/node-docker-compose

    - name: Build and push Docker image
      id: push
      uses: docker/build-push-action@v6.9.0
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}

    - name: Install SSH Agent and Add Key
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.SSH_KEY_TEMP }}

    - name: Deploy to EC2
      run: |
        # Set variables
        EC2_USER=ubuntu  # Ensure this is the correct user for your EC2 instance
        EC2_HOST=${{ secrets.EC2_IP_TEMP }}  # Fetching the public IP from GitHub Secrets
        CONTAINER_NAME=testmultistage-app  # Name of the running container
        IMAGE_NAME=mihirinventam/node-docker-compose:latest  # The Docker image name

        # SSH into the EC2 instance and execute commands
        ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST << 'ENDSSH'
          set -e  # Exit on any error
          if [ "$(docker ps -q -f name=$CONTAINER_NAME)" ]; then
              echo "Stopping and removing existing container..."
              docker stop $CONTAINER_NAME || { echo "Failed to stop container"; exit 1; }
              docker rm $CONTAINER_NAME || { echo "Failed to remove container"; exit 1; }
          fi

          echo "Pulling latest Docker image..."
          docker pull $IMAGE_NAME || { echo "Failed to pull image"; exit 1; }

          echo "Running new container..."
          docker run -d --name $CONTAINER_NAME -p 7000:7000 $IMAGE_NAME || { echo "Failed to run container"; exit 1; }
        ENDSSH
